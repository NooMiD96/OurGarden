@using System.Text.RegularExpressions
@inject Microsoft.AspNetCore.SpaServices.Prerendering.ISpaPrerenderer prerenderer

@model ApiService.Abstraction.ViewModel.HomePageViewModel

@{
    Layout = null;

    const string siteUrl = "https://xn----7sbbq5b0a1c.com/";
    const string logoSiteUrl = "https://xn----7sbbq5b0a1c.com/esh.png";

    var jsBundles = new List<string>();
    var cssBundles = new List<string>();
    string stringCss = default;

    string helmetTitle = default;
    string helmetMeta = default;

    string initialReduxStateJson = default;

    string titleText = default;
    string descriptionText = default;

    string html = default;
    try
    {
        var prerenderResult = await prerenderer.RenderToString("wwwroot/client/server/main-server", customDataParameter: Model);

        if (!String.IsNullOrEmpty(prerenderResult.RedirectUrl))
        {
            Context.Response.Redirect(prerenderResult.RedirectUrl, true);
        }

        html = prerenderResult?.Html;

        jsBundles = prerenderResult?.Globals?["js"]?.Select(x => x.Value<string>("publicPath")).ToList();
        cssBundles = prerenderResult?.Globals?["css"]?.Select(x => x.Value<string>("publicPath")).ToList();
        stringCss = prerenderResult?.Globals?["stringCss"]?.ToString();

        helmetTitle = prerenderResult?.Globals?["helmetTitle"]?.ToString();
        helmetMeta = prerenderResult?.Globals?["helmetMeta"]?.ToString();

        var titleMatch = Regex.Match(helmetTitle, @"<title.*>(.*)</title>");
        titleText = titleMatch.Success ? titleMatch.Groups[1]?.Value : default;
        var descriptionMatch = Regex.Match(helmetMeta, @"<meta.*name=""description"" content=""(.*?)"".*/>");
        descriptionText = descriptionMatch.Success ? descriptionMatch.Groups[1]?.Value : default;

        initialReduxStateJson = prerenderResult?.Globals?["initialReduxState"]?.ToString();

        if (prerenderResult != null && prerenderResult.StatusCode.HasValue)
        {
            if (Context.Response != null)
            {
                Context.Response.StatusCode = prerenderResult?.StatusCode ?? 200;
            }
        }
    }
    catch (Exception ex)
    {
        Serilog.Log.Error(ex, "Что-то пошло не так, на рендере страницы произошла ошибка!!!");
        Context.Response.Redirect("/", true);
    }
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <base href="~/" />

    <link rel="apple-touch-icon" sizes="180x180" href="~/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="~/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="~/favicon-16x16.png">
    <link rel="manifest" href="~/site.webmanifest">
    <link rel="mask-icon" href="~/safari-pinned-tab.svg" color="#5fd55b">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="msapplication-TileImage" content="~/mstile-144x144.png">
    <meta name="theme-color" content="#ffffff">

    @Html.Raw(helmetTitle)
    @Html.Raw(helmetMeta)

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website">
    <meta property="og:url" content="@siteUrl">
    <meta property="og:image" content="@logoSiteUrl">

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="@siteUrl">
    <meta property="twitter:image" content="@logoSiteUrl">

    @if (!String.IsNullOrWhiteSpace(titleText))
    {
        <meta property="og:title" content="@titleText">
        <meta property="twitter:title" content="@titleText">
    }
    else
    {
        <meta property="og:title" content="Наш Сад">
        <meta property="twitter:title" content="Наш Сад">
    }
    @if (!String.IsNullOrWhiteSpace(descriptionText))
    {
        <meta property="og:description" content="@descriptionText">
        <meta property="twitter:description" content="@descriptionText">
    }

    <environment include="Development,Production">
        <!-- Yandex.Metrika counter -->
        <script type="text/javascript">
            (function (m, e, t, r, i, k, a) {
                m[i] = m[i] || function () { (m[i].a = m[i].a || []).push(arguments) };
                m[i].l = 1 * new Date(); k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
            })
                (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

            ym(@Model.YandexMetrikaCounterId, "init", {
                clickmap: true,
                trackLinks: true,
                accurateTrackBounce: true,
                webvisor: true
            });
        </script>
        <!-- /Yandex.Metrika counter -->
    </environment>

    <environment include="Production">
        <!-- JivoSite -->
        <script src="//code.jivosite.com/widget.js" data-jv-id="@Model.JivoSiteId" async></script>
        <script>
            function jivo_onOpen() {
                ym(@Model.JivoSiteId, "reachGoal", "JIVO_CLICK")
            }
        </script>
        <!-- /JivoSite -->
    </environment>

    @if (jsBundles != null)
    {
        @foreach (var bundle in jsBundles)
        {
            <script src="@bundle" asp-append-version="true"></script>
        }
    }

    @if (cssBundles != null)
    {
        @foreach (var bundle in cssBundles)
        {
            <link href="@bundle" rel="stylesheet" asp-append-version="true" />
        }
    }

    <style id="jss-server-side">@(Html.Raw(stringCss))</style>

    <script>
        window.initialReduxState = @{
            if (initialReduxStateJson != null)
            {
                @Html.Raw(initialReduxStateJson);
            }
            else
            {
                @Html.Raw("\"\"");
            }
        };
        window.__isMobileBrowser = @(Model.IsMobileBrowser ? "true" : "false");
    </script>
</head>
<body>
    <environment include="Production">
        <!-- Yandex.Metrika counter -->
        <noscript>
            <div><img src="https://mc.yandex.ru/watch/@Model.YandexMetrikaCounterId" style="position:absolute; left:-9999px;" alt="" /></div>
        </noscript>
        <!-- /Yandex.Metrika counter -->
    </environment>

    <div id="react-app">@Html.Raw(html)</div>
</body>
</html>
